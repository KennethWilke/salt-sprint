---
header:
  author: CC, PI
  title: Chapter 1, Salt Fundamentals
  description: Salt Fundamentals Course

slides:
   -
     - nested:
         -
           - h1: Why use Salt?
           - ul:
             - Automate
             - Configure
             - Deploy
             - Provision
           - class_notes: |
               1. Explain the need for automation in the ever growing scale of modern IT infrastructure. Example "patching heartbleed"
               2. Speak to the need to eliminate snow flake servers. Those special servers that can never be replicated
               3. Talk about deploying applications from source control and other uses
               4. Speak to the need for provisioning resources dynamically in the API based world we now live in

         -
           - h2: What could you use Salt for?
           - p: 'In small groups discuss otherways salt could help improve a customers infrastructure.'
           - p: 'See what examples you can come up with where configuration management like salt would have saved time or resources.'
           - class_notes: |
               1. Get the class involved. However they want to come up with use cases based on what the know now, which isnt much but the concepts should be imediately practical

         -
           - h2: Fast
           - ul:
             - Salt is easy to learn.
             - Setup is fast.
             - ZeroMQ and msgpack.
           - class_notes: |
               1. You can automate in under 30 minutes. Forget about how it works, just do it.
               2. ZeroMQ and msgpack allow for lightning fast communication.

         -
           - h2: Flexible
           - p: 'Salt can be used for basic or custom configurations:'
           - ul:
             - write modules in any language
             - application deployment
             - orchestration
             - provisioning
             - SSH or Agent based
           - p: ""
           - p: Can configure any device that runs python.
         -
           - h2: Secure
           - ul:
             - Keys secure the master minion connections.
             - AES secures data payload.
           - class_notes: |
               1. Keys secure the relationship between the master and the minion nodes.
               2. while the faster AES encryption secures the data payload.
         -
           - h1: What can Salt do?
           - ul:
             - configure
             - deploy
             - build
             - execute and retrieve
             - monitor
           - class_notes: |
               1. Talk to configuration management in general.