---
header:
  author: Justin Phelps
  title: Example Commands and State Files
  description: Example commands and state files for various tasks.

slides:
   -
     - nested:
         -
           - h1: Example Commands and State Files
           - ul: 
             - State and Execution Modules
             - test.ping
             - command
             - pkg and service
             - Lab
         -
           - h2: State and Execution Modules
           - p: 'State modules are used when calling state.sls or highstate against a minion.'
           - code: |
               fred:
                 user.present:
                   - fullname: Fred Jones
                   - shell: /bin/zsh
                   - home: /home/fred
                   - uid: 4000
                   - gid: 4000
                   - groups:
                     - wheel
                     - storage
                     - games
         -
           - h2: State and Execution Modules
           - p: 'Execution modules are used when calling modules directly from the command line.'
           - code: |
               salt '*' user.add fred uid gid groups home shell
         -
           - h2: test.ping
           - p: This is the most basic module you can run. It simply connects to the targeted minion(s) and returns True if that minion responds.
           - code: |
               salt '*' test.ping
               minion1:
                   True
               minion2:
                   True
           - p: There is no matching state module for test.ping.
         -
           - h2: test.ping Demo
           - class_notes: |
               SSH to your salt master, and run the command "salt '*' test.ping" and show the output to the class.
         -
           - h2: Running Commands
           - p: Running arbitrary commands can come in handy for one time operations. This is done with the cmd.run module.
           - p: Execution Example
           - code: |
               salt webservers cmd.run "service apache2 restart"
           - p: State Example
           - code: |
               touch /tmp/foo:
                 cmd.run:
                   - creates: /tmp/foo
           - class_notes: |
               Make sure you make the point that one of commands shouldn't be run over and over unless they are idempotent. Idempotent is the idea that a state file or command can be run over and over, and it checks to make sure it needs to perform an action before attempting to do so.
         -
           - h2: Date Command Demo
           - class_notes: |
               SSH to your salt master, and run the command "salt '*' cmd.run date" and show the output to the class. This should output the result of the date command as run on each minion.
         -
           - h2: Installing a Package
           - p: Package installations are abstracted by Salt. You don't have to invoke a specific yum or apt module, but a pkg module.
           - p: Execution Example
           - code: |
               salt '*' pkg.install vim
           - p: State Example
           - code: |
               vim:
                 pkg.installed
           - p: Package names can still be different between distributions. (ie. apache2 and httpd)
         -
           - h2: Installing sysstat Demo
           - class_notes: |
               SSH to your salt master, and run the command "salt '*' pkg.install sysstat" and show the output to the class. This should install the vim package on the targeted minions, and show the old/new package versions.
         -
           - h2: Starting a Service
           - p: Starting services is done with the service module.
           - p: Execution Example
           - code: |
               salt '*' service.start apache2
           - p: State Example
           - code: |
               apache2:
                 service:
                   - running
           - p: Service names can still be different between distributions. (ie. apache2 and httpd)
         -
           - h2: Restart SSH Demo
           - class_notes: |
               SSH to your salt master, and run the command "salt '*' service.restart ssh" and show the output to the class. This should restart the ssh service and show True if successful.
         -
           - h2: Grains
           - p: A grain is a piece of data related directly to a Salt Minion. You can view all grains related to a node with the grains.items module.
           - code: |
               salt minion1 grains.items
           - p: You can target minions using data in grains. This example will target all your CentOS servers with a test.ping.
           - code: |
               salt -G 'os:CentOS' test.ping
         -
           - h2: Grains Demo
           - class_notes: |
               SSH to your salt master, and run the command "salt '*' grains.items" and show the class all the various data collected in grains.
         -
           - h2: Lab
           - p: Find an execution or state module in SaltStack's Documentation and share it with the class.
           - link: [ 'http://docs.saltstack.org', 'http://docs.saltstack.org' ]
