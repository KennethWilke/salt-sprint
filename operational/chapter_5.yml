---
header:
  author: Bruce Stringer and Justin Phelps
  title: Salt Operational, Chapter 5, Ordering Execution
  description: Through the use of salt requisites students will learn how to make sure certain things happen in a specific order as well as react to changes. EX. make sure packages are installed before starting a service. Restart a service after a config change.

slides:
   -
     - nested:
         -
           - h1: Ordering Execution
           - ul: 
             - Require
             - Watch
             - Prereq
             - Import
           - class_notes: |
               1. Understand grains and its uses.
               2. Understand pillars and its uses.
               3. Targeting based on pillar variables and grains in states and command line.

         -
           - h2: Require
           - p: 'Used to load the dependent state before the depending current'
           - code: |
               mysql_install:
                 pkg.installed:
                   - name: mysql

               mysql_config:
                 file.managed:
                   - name: /etc/my.cnf
                   - source: salt://files/my.cnf
                   - require:
                     - pkg: mysql_install

           - class_notes: |
               1. The require statement is used to load one action before another action.
               2. Very important because actions do not load in sequential order.

         -
           - h2: Require_in
           - p: 'Does the reverse of require'
           - code: |
               mysql_install:
                 pkg.installed:
                   - name: mysql
                   - require_in:
                     - file: mysql_config

               mysql_config:
                 file.managed:
                   - name: /etc/my.cnf
                   - source: salt://files/my.cnf
                   - require:
                     - pkg: mysql_install

           - class_notes: |
               1. The require_in is the literal reverse of require.
               2. Example above is the same as the previous example but using require_in.

         -
           - h2: Watch
           - p: 'Statement used to monitor changes in other states'
           - code: |
               mysql_service_restart:
                 service.restart:
                   - name: mysqld
                   - watch:
                     - file: mysql_config
           - class_notes: |
               1. Watch only applies when a high state is run.
               2. Does not watch for user modifications to file but only if salt itself modifies it.
               3. In this example we have a mysql restart action that watches and triggers on the mysql_config action from the previous example.

         -
           - h2: Prereq
           - p: 'Allows for actions to be taken based on the expected results of a state that has not yet been executed'
           - code: |
               graceful_down:
                 cmd.run:
                   - name: service apache graceful
                   - prereq:
                     - file: site_code

               apache_start:
                 cmd.run:
                   - name: service apache start
                   - watch:
                     - file: site_code

               site_code:
                 file.recurse:
                   - name: /opt/site_code
                   - source: salt://site/code
           - class_notes: |
               1. In this example we show how repreq can work in conjunction with watch to have Apache shutdown before site_code executes.
               2. Then, apache_start will run based on its watching of site_code being actioned.

         -
           - h2: "LAB: Prereq"
           - p: 'Perform an Apache service restart if the Apache package is installed and be sure Apache is running'
           - class_notes: |
               1. notes here

         -
           - h2: Cliff Notes
           - code: |
               code here

         -
           - h2: Include
           - p: 'You can include whole sls files in your states'
           - code: |
               include:
                 - foo
           
               bar_install:
                 pkg.installed:
                   - name: bar
                   - require:
                     - sls: foo
           - class_notes: |
               1. Here we are including the sls file 'foo' and in the 'bar' action we require the sls 'foo'.

         -
           - h2: "LAB: Include"
           - p: 'Split our your big state file in to seperate directories with a init.sls file in it and include them in a single state'
           - class_notes: |
               1. notes here
         
         -
           - h2: Cliff Notes
           - code: |
               code here

         -
           - h2: Order
           - code: |
               mysql_install:
                 pkg.installed:
                   - name: mysql-server
                   - order: 1
           - class_notes: |
               1. Not a best practice and require should be used before this.
               2. 'last' is also an option for order along with numeric values.

