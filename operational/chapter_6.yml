---
header:
  author: Eric Hernandez
  title: Salt Operational, Chapter 5, Leveraging Grains and Pillars
  description: Explore the uses for the information provided by Salt grain and pillar data.

slides:
   -
     - nested:
         -
           - h1: Leveraging Grains and Pillars
           - ul: 
             - Grains
             - Pillar
             - Targeting
           - class_notes: |
               1. Understand grains and its uses.
               2. Understand pillars and its uses.
               3. Targeting based on pillar variables and grains in states and command line.

         -
           - h2: Grains
           - p: 'Information about the system the minion is running on or custom grains'
           - ul:
             - Static info from minion start
             - Custom grains
             - /etc/salt/grains
           - class_notes: |
               1. Grains give infomation about the underlying system the minion is running on. 
               2. Custom grains can be set via command line or in /etc/salt/grains.

         -
           - h2: Command Line Examples
           - code: |
               salt '*' grains.ls
               salt '*' grains.items
               salt -G 'os:CentOS' test.ping
           - class_notes: |
               1. The first 2 command line examples list out the minion grains.
               2. You can target based on grains using the '-G' flag via command line.

         -
           - h2: State example
           - code: |
               'role:web':
                   - match: grain
                   - webserver
               'role:database':
                   - match: grain
                   - database

         -
           - h2: 'Lab: View and Set Grains'
           - p: 'List and view available grains and set a custom grain of role to your minions.'
           - class_notes: |
               1. Lab will have them use grain data in a state file to set what package gets installed.

         -
           - h2: 'Lab: Using Grains in States'
           - p: 'Targeting based on OS grain information.'
           - class_notes: |
               1. In this lab you will actually want them to go into there previously created state and setup a jinja if statement where if grain['os'] == ubuntu then apache2, etc.

         -
           - h2: Pillar
           - p: 'Designed to offer global variables to minions'
           - ul:
             - Managed like Salt State Tree
             - /srv/pillar
             - Storing sensitive data
           - class_notes: |
               1. Pillar provides a way to share data with all minions.
               2. Pillar top file and state files stored in /srv/pillar.
               3. Unlike state tree, pillar data is only available for the targeted minion specified by the matcher type. This makes it useful for storing sensitive data specific to a particular minion.

         -
           - h2: Examples
           - code: |
               salt '*' pillar.items
               salt -P 'key:value' test.ping
           - code: |
               {{ pillar['key'] }}
           - class_notes: |
               1. List out pillar items.
               2. You can target base on pillar with the '-P' flag.
               3. You reference pillar items in state file using '{{ pillar['key'] }}' and the value of key will be dropped in.

         -
           - h2: 'Lab: Using Pillar'
           - p: 'Set pillar data based on OS grain and use that pillar data in the state created in the previous lab instead of the grain.'
           - class_notes: |
               1. Lab will have them set pillar data targeted by os grain, and use that pillar data in the state instead of the previous grain if statement.
